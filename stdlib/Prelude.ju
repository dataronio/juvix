mod Prelude where

-- it seems custom arrow syntax is not operational

let ty_ = %Builtin.Type

sig ty : ty_ 1
let ty = ty_ 0

let SAny = %Builtin.SAny
let arr = %Builtin.Arrow
let dpair = %Builtin.Pair

let (->) = arr SAny
declare infixr (->) 1

let (:) = %Builtin.Colon
declare infixr (:) 2

let cat-product = %Builtin.CatProduct
let cat-coproduct = %Builtin.CatCoproduct

let cat-product-intro = %Builtin.CatProductIntro
let cat-product-elim-left = %Builtin.CatProductElimLeft
let cat-product-elim-right = %Builtin.CatProductElimRight
let cat-coproduct-intro-left = %Builtin.CatCoproductIntroLeft
let cat-coproduct-intro-right = %Builtin.CatCoproductIntroRight
let cat-coproduct-elim = %Builtin.CatCoproductElim

sig id : (a : ty) -> a -> a
let id _ x = x

sig const : (a : ty) -> (b : ty) -> a -> b -> a
let const _ _ x = \_ -> x

-- sig flip : (a : ty) -> (b : ty) -> (c : ty) -> b -> a -> c
-- let flip _ _ _ f x y = f y x

-- TODO FIXME
--declare infixl (.) 9

--sig (.) : (a : ty) -> (b : ty) -> (c : ty) -> (b -> c) -> (a -> b) -> (a -> c)
--let (.) f g = \x -> f (g x)
