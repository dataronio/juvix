mod Datatypes where

open Prelude
open Circuit

sig field : ty
let field = %Circuit.field

sig (+) : field -> field -> field
let (+) = %Circuit.add
declare infixl (+) 5

sig (==) : field -> field -> bool
let (==) = %Circuit.eq
declare infixl (==) 2

type verySimpleType = One field

sig verySimpleTerm : verySimpleType
let verySimpleTerm = One 0

type bar : ty = | P field field | Q field field field

sig patternMatch : bar -> field
let patternMatch (P x y) = x + y
let patternMatch (Q x y z) = x + y + z

-- Fails to typecheck:
-- "Error on toHR: Name "atomExp" :| [] not in scope
-- ( probably a bug in the elaborator from frontend )"
type atomExp a = Atom a

sig testAExp : atomExp field
let testAExp = Atom 1

-- Fails to typecheck:
-- "Error on toHR: Name "sExp" :| [] not in scope
-- ( probably a bug in the elaborator from frontend )"
type sExp a = Atom a | SPair (sExp a) (sExp a)

sig main : field
let main =
  -- Fails to typecheck:
  --  "Error: TypecheckerError
  --  ( InsufficientUsage
  --      { usageNeeded = SAny
  --      , usageActual = SNat 0
  --      }
  let vs = verySimpleType in

  -- Fails to typecheck:
  --  "Error: TypecheckerError
  --  ( NotPrimTy
  --      { typeActual = VNeutral
  --          ( NFree
  --              ( Global
  --                  ( "a" :| [] )
  --              ) ()
  --          ) ()
  --      }
  --  ) on Term: Let SAny
  --  ( Free
  --      ( Global
  --          ( "Datatypes" :| [ "testAExp" ] )
  --      ) ()
  --  )
  let ta = testAExp in

  0
