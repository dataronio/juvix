Right
    ( Header
        ( "FlatDatatypes" :| [] )
        [ ModuleOpen
            ( Open
                ( "Prelude" :| [] )
            )
        , ModuleOpen
            ( Open
                ( "Michelson" :| [] )
            )
        , Signature
            ( Sig
                { signatureName = "+"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "nat" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "nat" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "nat" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "+"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Michelson" :| [ "add" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "+" 5 )
            )
        , Signature
            ( Sig
                { signatureName = "nil"
                , signatureUsage = Nothing
                , signatureArrowType = Application
                    ( App
                        { applicationName = Name
                            ( "list" :| [] )
                        , applicationArgs = Name
                            ( "operation" :| [] ) :| []
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "nil"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Michelson" :| [ "nil" ] )
                            )
                        )
                    }
                )
            )
        , Signature
            ( Sig
                { signatureName = "make-pair"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Application
                            ( App
                                { applicationName = Name
                                    ( "list" :| [] )
                                , applicationArgs = Name
                                    ( "operation" :| [] ) :| []
                                }
                            )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "nat" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Application
                                    ( App
                                        { applicationName = Name
                                            ( "pair" :| [] )
                                        , applicationArgs = Parened
                                            ( Application
                                                ( App
                                                    { applicationName = Name
                                                        ( "list" :| [] )
                                                    , applicationArgs = Name
                                                        ( "operation" :| [] ) :| []
                                                    }
                                                )
                                            ) :|
                                            [ Name
                                                ( "nat" :| [] )
                                            ]
                                        }
                                    )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "make-pair"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Michelson" :| [ "pair" ] )
                            )
                        )
                    }
                )
            )
        , Type
            ( Typ
                { typeUsage = Nothing
                , typeName' = "pq"
                , typeArgs = []
                , typeForm = Arrowed
                    { dataArrow = Name
                        ( "ty" :| [] )
                    , dataAdt' = Sum
                        ( S
                            { sumConstructor = "P"
                            , sumValue = Just
                                ( ADTLike
                                    [ Name
                                        ( "nat" :| [] )
                                    , Name
                                        ( "nat" :| [] )
                                    ]
                                )
                            } :|
                            [ S
                                { sumConstructor = "Q"
                                , sumValue = Just
                                    ( ADTLike
                                        [ Name
                                            ( "nat" :| [] )
                                        , Name
                                            ( "nat" :| [] )
                                        , Name
                                            ( "nat" :| [] )
                                        ]
                                    )
                                }
                            ]
                        )
                    }
                }
            )
        , Signature
            ( Sig
                { signatureName = "patternMatch"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "pq" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Name
                            ( "nat" :| [] )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "patternMatch"
                    , functionLikeArgs =
                        [ ConcreteA
                            ( MatchLogic
                                { matchLogicContents = MatchCon
                                    ( "P" :| [] )
                                    [ MatchLogic
                                        { matchLogicContents = MatchName "x"
                                        , matchLogicNamed = Nothing
                                        }
                                    , MatchLogic
                                        { matchLogicContents = MatchName "y"
                                        , matchLogicNamed = Nothing
                                        }
                                    ]
                                , matchLogicNamed = Nothing
                                }
                            )
                        ]
                    , functionLikeBody = Body
                        ( Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "x" :| [] )
                                , infixOp = "+" :| []
                                , infixRight = Name
                                    ( "y" :| [] )
                                }
                            )
                        )
                    }
                )
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "patternMatch"
                    , functionLikeArgs =
                        [ ConcreteA
                            ( MatchLogic
                                { matchLogicContents = MatchCon
                                    ( "Q" :| [] )
                                    [ MatchLogic
                                        { matchLogicContents = MatchName "x"
                                        , matchLogicNamed = Nothing
                                        }
                                    , MatchLogic
                                        { matchLogicContents = MatchName "y"
                                        , matchLogicNamed = Nothing
                                        }
                                    , MatchLogic
                                        { matchLogicContents = MatchName "z"
                                        , matchLogicNamed = Nothing
                                        }
                                    ]
                                , matchLogicNamed = Nothing
                                }
                            )
                        ]
                    , functionLikeBody = Body
                        ( Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "x" :| [] )
                                , infixOp = "+" :| []
                                , infixRight = Infix
                                    ( Inf
                                        { infixLeft = Name
                                            ( "y" :| [] )
                                        , infixOp = "+" :| []
                                        , infixRight = Name
                                            ( "z" :| [] )
                                        }
                                    )
                                }
                            )
                        )
                    }
                )
            )
        , Signature
            ( Sig
                { signatureName = "main"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Application
                            ( App
                                { applicationName = Name
                                    ( "pair" :| [] )
                                , applicationArgs = Name
                                    ( "nat" :| [] ) :|
                                    [ Name
                                        ( "nat" :| [] )
                                    ]
                                }
                            )
                        , infixOp = "->" :| []
                        , infixRight = Application
                            ( App
                                { applicationName = Name
                                    ( "pair" :| [] )
                                , applicationArgs = Parened
                                    ( Application
                                        ( App
                                            { applicationName = Name
                                                ( "list" :| [] )
                                            , applicationArgs = Name
                                                ( "operation" :| [] ) :| []
                                            }
                                        )
                                    ) :|
                                    [ Name
                                        ( "nat" :| [] )
                                    ]
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "main"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Let
                            ( Let'
                                { letBindings = Like
                                    { functionLikedName = "pm"
                                    , functionLikeArgs = []
                                    , functionLikeBody = Body
                                        ( Application
                                            ( App
                                                { applicationName = Name
                                                    ( "patternMatch" :| [] )
                                                , applicationArgs = Parened
                                                    ( Application
                                                        ( App
                                                            { applicationName = Name
                                                                ( "P" :| [] )
                                                            , applicationArgs = Constant
                                                                ( Number
                                                                    ( Integer' 1 )
                                                                ) :|
                                                                [ Constant
                                                                    ( Number
                                                                        ( Integer' 2 )
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                    ) :| []
                                                }
                                            )
                                        )
                                    }
                                , letBody = Lambda
                                    ( Lamb
                                        { lambdaArgs = MatchLogic
                                            { matchLogicContents = MatchName "_"
                                            , matchLogicNamed = Nothing
                                            } :| []
                                        , lambdaBody = Application
                                            ( App
                                                { applicationName = Name
                                                    ( "make-pair" :| [] )
                                                , applicationArgs = Name
                                                    ( "nil" :| [] ) :|
                                                    [ Constant
                                                        ( Number
                                                            ( Integer' 9 )
                                                        )
                                                    ]
                                                }
                                            )
                                        }
                                    )
                                }
                            )
                        )
                    }
                )
            )
        ]
    )