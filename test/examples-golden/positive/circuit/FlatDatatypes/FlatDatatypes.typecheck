Ann
    { usage = SAny
    , type' = PrimTy PField
    , term = AppM
        ( Ann
            { usage = SAny
            , type' = Pi SAny
                ( SymT
                    ( "FlatDatatypes" :| [ "pq" ] )
                ) ( PrimTy PField )
            , term = Var
                ( "FlatDatatypes" :| [ "patternMatch" ] )
            }
        )
        [ Ann
            { usage = SAny
            , type' = SymT
                ( "FlatDatatypes" :| [ "pq" ] )
            , term = AppM
                ( Ann
                    { usage = SAny
                    , type' = Pi SAny ( PrimTy PField )
                        ( Pi SAny ( PrimTy PField )
                            ( SymT
                                ( "FlatDatatypes" :| [ "pq" ] )
                            )
                        )
                    , term = Var
                        ( "FlatDatatypes" :| [ "P" ] )
                    }
                )
                [ Ann
                    { usage = SAny
                    , type' = PrimTy PField
                    , term = Prim
                        ( Return
                            { retType = PrimType
                                { getPrimType = PField :| [] }
                            , retTerm = PConst
                                ( P
                                    ( 1 `modulo` 52435875175126190479447740508185965837690552500527637822603658699938581184513 )
                                )
                            }
                        )
                    }
                , Ann
                    { usage = SAny
                    , type' = PrimTy PField
                    , term = Prim
                        ( Return
                            { retType = PrimType
                                { getPrimType = PField :| [] }
                            , retTerm = PConst
                                ( P
                                    ( 2 `modulo` 52435875175126190479447740508185965837690552500527637822603658699938581184513 )
                                )
                            }
                        )
                    }
                ]
            }
        ]
    }