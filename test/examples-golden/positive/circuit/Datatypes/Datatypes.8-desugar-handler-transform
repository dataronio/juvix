[
    ( "open" "Prelude" )
,
    ( "open" "Circuit" )
,
    ( "open" "Circuit.Field" )
,
    ( "type" "verySimpleType" () ( "One" "field" ) )
,
    ( ":defsig-match" "verySimpleTerm" "verySimpleType" ( () ( "One" 0 ) ) )
,
    ( "type"
        ( "bar" ":type" "ty" ) ()
        ( "P" "field" "field" )
        ( "Q" "field" "field" "field" ) )
,
    ( ":defsig-match" "patternMatch"
        ( ":infix" "->" "bar" "field" )
        (
            ( ( "P" "x" "y" ) )
            ( ":infix" "^" "x" ( ":infix" "+" 2 ( ":infix" "^" "y" 2 ) ) ) )
        (
            ( ( "Q" "x" "y" "z" ) )
            ( ":infix" "^" "x"
                ( ":infix" "+" 2
                    ( ":infix" "^" "y"
                        ( ":infix" "+" 2 ( ":infix" "^" "z" 2 ) ) ) ) ) ) )
,
    ( "type"
        ( "functionTypeInConstructor" ":type" "ty" ) ()
        ( "FTIC_Left" "field" )
        ( "FTIC_Right" ( ":infix" "->" "field" "field" ) ) )
,
    ( ":defsig-match" "fticTestFunc"
        ( ":infix" "->" "field" "field" )
        ( ( "x" ) "x" ) )
,
    ( ":defsig-match" "fticTestTerm" "functionTypeInConstructor"
        ( () ( "FTIC_Right" "fticTestFunc" ) ) )
,
    ( "type" "sExpField" ()
        ( "Atom" "field" )
        ( "SPair" "sExpField" "sExpField" ) )
,
    ( ":defsig-match" "s1" "sExpField"
        ( ()
            ( "SPair"
                ( ":paren" ( "Atom" 1 ) )
                ( ":paren"
                    ( "SPair"
                        ( ":paren"
                            ( "SPair"
                                ( ":paren" ( "Atom" 2 ) )
                                ( ":paren" ( "Atom" 3 ) ) ) )
                        ( ":paren" ( "Atom" 4 ) ) ) ) ) ) )
,
    ( ":defsig-match" "ssize"
        ( ":infix" "->" "sExpField" "field" )
        ( ( ( "Atom" "x" ) ) 1 )
        (
            ( ( "SPair" "x" "y" ) )
            ( ":infix" "+" ( "ssize" "x" ) ( "ssize" "y" ) ) ) )
,
    ( ":defsig-match" "main" "field"
        ( ()
            ( ":let-match" "vst"
                ( () "verySimpleTerm" )
                ( ":let-match" "pm"
                    ( () ( "patternMatch" ( ":paren" ( "Q" 0 1 2 ) ) ) )
                    ( ":let-match" "ftict"
                        ( () "fticTestTerm" )
                        ( ":let-match" "sexpTest"
                            ( () ( "ssize" "s1" ) ) 3 ) ) ) ) ) ) ]