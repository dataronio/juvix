Rec
    { recordContents = T
        { public = fromList
            [
                ( "sExpField"
                , TypeDeclar
                    { definitionRepr =
                        ( "sExpField" ()
                            ( "Atom" "field" )
                            ( "SPair" "sExpField" "sExpField" ) ) } )
            ,
                ( "Atom"
                , SumCon
                    ( Sum { sumTDef = Nothing, sumTName = "sExpField" } ) )
            ,
                ( "s1"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "sExpField"
                        , defTerm =
                            ( ":lambda-case"
                                ( ()
                                    ( "SPair"
                                        ( ":paren" ( "Atom" 1 ) )
                                        ( ":paren"
                                            ( "SPair"
                                                ( ":paren"
                                                    ( "SPair"
                                                        ( ":paren"
                                                            ( "Atom" 2 ) )
                                                        ( ":paren"
                                                            ( "Atom" 3 ) ) ) )
                                                ( ":paren"
                                                    ( "Atom" 4 ) ) ) ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "functionTypeInConstructor"
                , TypeDeclar
                    { definitionRepr =
                        (
                            ( "functionTypeInConstructor" ":type" "ty" ) ()
                            ( "FTIC_Left" "field" )
                            ( "FTIC_Right"
                                ( ":infix" "->" "field" "field" ) ) ) } )
            ,
                ( "P", SumCon ( Sum { sumTDef = Nothing, sumTName = "bar" } ) )
            ,
                ( "fticTestFunc"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "field" "field" )
                        , defTerm =
                            ( ":lambda-case" ( ( "x" ) "x" ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "fticTestTerm"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "functionTypeInConstructor"
                        , defTerm =
                            ( ":lambda-case"
                                ( () ( "FTIC_Right" "fticTestFunc" ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "main"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "field"
                        , defTerm =
                            ( ":lambda-case"
                                ( ()
                                    ( ":let-match" "vst"
                                        ( () "verySimpleTerm" )
                                        ( ":let-match" "pm"
                                            ( ()
                                                ( "patternMatch"
                                                    ( ":paren"
                                                        ( "Q" 0 1 2 ) ) ) )
                                            ( ":let-match" "ftict"
                                                ( () "fticTestTerm" )
                                                ( ":let-match" "sexpTest"
                                                    ( ()
                                                        ( "ssize" "s1" ) ) 3 ) ) ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "ssize"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "sExpField" "field" )
                        , defTerm =
                            ( ":lambda-case"
                                ( ( ( "Atom" "x" ) ) 1 )
                                (
                                    ( ( "SPair" "x" "y" ) )
                                    ( ":infix" "+"
                                        ( "ssize" "x" )
                                        ( "ssize" "y" ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "verySimpleType"
                , TypeDeclar
                    { definitionRepr =
                        ( "verySimpleType" () ( "One" "field" ) ) } )
            ,
                ( "SPair"
                , SumCon
                    ( Sum { sumTDef = Nothing, sumTName = "sExpField" } ) )
            ,
                ( "Q", SumCon ( Sum { sumTDef = Nothing, sumTName = "bar" } ) )
            ,
                ( "FTIC_Left"
                , SumCon
                    ( Sum
                        { sumTDef = Nothing
                        , sumTName = "functionTypeInConstructor" } ) )
            ,
                ( "One"
                , SumCon
                    ( Sum { sumTDef = Nothing, sumTName = "verySimpleType" } ) )
            ,
                ( "FTIC_Right"
                , SumCon
                    ( Sum
                        { sumTDef = Nothing
                        , sumTName = "functionTypeInConstructor" } ) )
            ,
                ( "x"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "field"
                        , defTerm =
                            ( ":lambda-case" ( () 3 ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "verySimpleTerm"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just "verySimpleType"
                        , defTerm =
                            ( ":lambda-case" ( () ( "One" 0 ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "patternMatch"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "bar" "field" )
                        , defTerm =
                            ( ":lambda-case"
                                (
                                    ( ( "P" "x" "y" ) )
                                    ( ":infix" "^" "x"
                                        ( ":infix" "+" 2
                                            ( ":infix" "^" "y" 2 ) ) ) )
                                (
                                    ( ( "Q" "x" "y" "z" ) )
                                    ( ":infix" "^" "x"
                                        ( ":infix" "+" 2
                                            ( ":infix" "^" "y"
                                                ( ":infix" "+" 2
                                                    ( ":infix" "^" "z" 2 ) ) ) ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "bar"
                , TypeDeclar
                    { definitionRepr =
                        (
                            ( "bar" ":type" "ty" ) ()
                            ( "P" "field" "field" )
                            ( "Q" "field" "field" "field" ) ) } ) ]
        , private = fromList [] }
    , recordMTy = Nothing
    , recordOpenList = []
    , recordQualifiedMap = map }